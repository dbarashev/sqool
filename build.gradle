buildscript {
	ext {
		kotlinVersion = '1.3.+'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}
plugins {
	id 'com.google.cloud.tools.jib' version '0.10.1'
}

apply plugin: 'application'
apply plugin: 'kotlin'

version = '1.0.0'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	jcenter()
}

mainClassName = 'com.bardsoftware.sqool.contest.AppSparkKt'

dependencies {
	compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    	compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"

	compile "com.xenomachina:kotlin-argparser:2.+"

	// PubSub stuff
	compile 'com.google.cloud:google-cloud-pubsub:0.26.+'

	// Postgres stuff
	compile group: 'org.postgresql', name: 'postgresql', version: '42.1.1'
	compile 'com.zaxxer:HikariCP:2.7.+'
	compile 'org.jetbrains.exposed:exposed:0.8.+'

	// Spark stuff
	compile "com.sparkjava:spark-kotlin:1.+"
	compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.+"
	compile "com.sparkjava:spark-template-freemarker:2.+"

	compile 'org.apache.httpcomponents:fluent-hc:4.5.3'
}

sourceSets {
	sql {
		resources {
			srcDir "$projectDir/src/main/sql"
		}
	}
}

task compileCoffeeScript {
	inputs.files "src/main/coffee"
	description = 'Compiles CoffeeScript'
	def sourceDir = "src/main/coffee"
	def includedFiles = fileTree("src/main/coffee") {
		include "*.coffee"
	}
	def targetDir = "build/resources/main/public/js"
	doLast {
		file(targetDir).mkdirs()
		includedFiles.each {file ->
			def filename = file.name
			exec {
				workingDir "$projectDir"
				executable 'coffee'
				args "-o", "$targetDir/", "$sourceDir/$filename"
			}
		}
	}
}

// Configures webpack to build development mode bundles
task configTypeScriptDev {
	doFirst {
		println("== TypeScript compiles in dev ==")
		project.ext["webpackConfig"] = "webpack.config.js"
	}
}

// Configures webpack to build production
task configTypeScriptProd {
	doFirst {
		println("== TypeScript compiles in prod ==")
		project.ext["webpackConfig"] = "webpack-prod.config.js"
	}
}

// Runs tslint against TypeScript sources
task tslint(type: Exec) {
	workingDir = "$projectDir"
	commandLine = "node_modules/tslint/bin/tslint"
	args = ["-p", "."]
	ignoreExitValue = true
}

// Compiles TypeScript sources and makes webpack bundle
task compileTypeScript(type: Exec) {
	inputs.files "src/main/ts"
	shouldRunAfter(configTypeScriptProd, configTypeScriptDev)
	workingDir = "$projectDir"
	doFirst {
		def webpackConfig = project.ext["webpackConfig"]
		def webpackOutput = "$buildDir/resources/main/public/js"
		if (project.ext.has("webpackOutput")) {
			webpackOutput = project.ext["webpackOutput"]
		}

		println("Webpacking JavaScripts using $webpackConfig")
		commandLine = 'npx'
		args = ['webpack', '--config', webpackConfig,
				'--output-path', webpackOutput]
	}
	doLast {
		println("TypeScript and Webpack done")
	}
}

assemble {
	dependsOn compileCoffeeScript
	dependsOn tslint
	dependsOn compileTypeScript
}

run {
	dependsOn configTypeScriptDev
	dependsOn assemble
}
jib {
	to.image = 'dbarashev/sqool-frontend'
}

task docker {
	doLast {
		mkdir "$buildDir/docker/workspace"
		copy {
			from sourceSets.sql.resources.srcDirs
			into "$buildDir/docker/workspace"
			include "*.sql"
		}
		exec {
			workingDir "$projectDir"
			executable 'docker'
			args 'build','-t', 'dbarashev/sqool-frontend-database', '-f', 'sqool-frontend-database.dockerfile', '.'
		}
	}
}

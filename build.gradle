buildscript {
	ext {
		kotlinVersion = '1.3.+'
	}
	repositories {
		google()
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath('com.squareup.sqldelight:gradle-plugin:1.1.1')
	}
}
plugins {
	id 'com.google.cloud.tools.jib' version '1.0.2'
}

apply plugin: 'application'
apply plugin: 'kotlin'
apply plugin: 'com.squareup.sqldelight'

version = '1.0.0'
sourceCompatibility = 1.8

ext {
	buildMode = findProperty('buildMode') ?: 'development'
}
repositories {
	mavenCentral()
	jcenter()
}

mainClassName = 'com.bardsoftware.sqool.contest.AppSparkKt'


dependencies {
	compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
	compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
	
	compile "com.xenomachina:kotlin-argparser:2.+"
	
	compile 'com.google.cloud.tools:jib-core:0.+'
	
	// PubSub stuff
	compile 'com.google.cloud:google-cloud-pubsub:0.26.+'
	
	// Postgres stuff
	compile group: 'org.postgresql', name: 'postgresql', version: '42.1.1'
	compile 'com.zaxxer:HikariCP:2.7.+'
	compile 'org.jetbrains.exposed:exposed:0.8.+'

	// Spark stuff
	compile "com.sparkjava:spark-kotlin:1.+"
	compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.+"
	compile "com.sparkjava:spark-template-freemarker:2.+"

	compile 'org.apache.httpcomponents:fluent-hc:4.5.3'
	compile "com.squareup.sqldelight:sqlite-driver:1.1.1"

	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.4.0'
}

sourceSets {
	main {
		kotlin {
			srcDirs += "$buildDir/sqldelight/ContestDb"
		}
	}
	sql {
		resources {
			srcDir "$projectDir/src/main/sql"
		}
	}
}

sqldelight {
	ContestDb {
		packageName = "com.bardsoftware.sqool.db"
		sourceFolders = ["db"]

		// Defaults to file("src/main/sqldelight")
		schemaOutputDirectory = file("build/dbs")
	}
}

task compileCoffeeScript {
	inputs.files "src/main/coffee"
	description = 'Compiles CoffeeScript'
	def sourceDir = "src/main/coffee"
	def includedFiles = fileTree("src/main/coffee") {
		include "*.coffee"
	}
	def targetDir = "build/resources/main/public/js"
	doLast {
		file(targetDir).mkdirs()
		includedFiles.each {file ->
			def filename = file.name
			exec {
				workingDir "$projectDir"
				executable 'coffee'
				args "-o", "$targetDir/", "$sourceDir/$filename"
			}
		}
	}
}

// Compiles TypeScript sources and makes webpack bundle
task buildClient(type: Exec) {
	inputs.files "src/main/ts"
	workingDir = "$projectDir"
	doFirst {
		println("Building client")
		commandLine = 'npm'
		if (project.buildMode == "development") {
			args = ['run', 'build', '--', '--mode', project.buildMode, "--dest", "$buildDir/resources/main/public/js"]
		} else {
			args = ['run', 'build', '--', '--mode', project.buildMode]
		}
	}
	doLast {
		println("TypeScript and Webpack done")
	}
}

assemble {
	dependsOn compileCoffeeScript
	dependsOn buildClient
}

run {
	dependsOn buildClient
}

test {
	useJUnitPlatform()
	testLogging {
        	exceptionFormat = 'full'
	}
}

jib {
	to.image = 'dbarashev/sqool-frontend'
}

task docker {
	doLast {
		mkdir "$buildDir/docker/workspace"
		copy {
			from sourceSets.sql.resources.srcDirs
			into "$buildDir/docker/workspace"
			include "*.sql"
		}
		exec {
			workingDir "$projectDir"
			executable 'docker'
			args 'build','-t', 'dbarashev/sqool-frontend-database', '-f', 'sqool-frontend-database.dockerfile', '.'
		}
	}
}

buildscript {
	ext {
		kotlinVersion = '1.3.+'
	}
	repositories {
		google()
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}
plugins {
	id 'com.google.cloud.tools.jib' version '1.7.0'
//	id "name.remal.check-updates" version "1.0.157"
}

apply plugin: 'application'
apply plugin: 'kotlin'

version = '1.0.3'
sourceCompatibility = 1.8

ext {
	buildMode = findProperty('buildMode') ?: 'development'
}
repositories {
	mavenCentral()
	jcenter()
}

mainClassName = 'com.bardsoftware.sqool.contest.AppSparkKt'

dependencies {
	compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
	compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"

	compile "com.xenomachina:kotlin-argparser:2.+"

	compile group: 'com.spotify', name: 'docker-client', version: '8.+'

	compile 'org.ocpsoft.prettytime:prettytime:4.+'

	// PubSub stuff
	compile 'com.google.cloud:google-cloud-pubsub:1.+'

	// Postgres stuff
	compile 'org.postgresql:postgresql:42.+'
	compile 'com.zaxxer:HikariCP:2.+'
	compile 'org.jetbrains.exposed:exposed:0.17.+'

	// Spark stuff
	compile "com.sparkjava:spark-kotlin:1.+"
	compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.+"
	compile "com.sparkjava:spark-template-freemarker:2.+"

	compile 'org.apache.httpcomponents:fluent-hc:4.+'

	compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.2.2'
	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.+'
	testCompile group: 'com.nhaarman', name: 'mockito-kotlin', version: '1.6.+'
}

sourceSets {
	main {
		kotlin {
			srcDirs += "$buildDir/sqldelight/ContestDb"
		}
	}
	contestImageTester {
		kotlin {
			srcDirs += "$projectDir/src/contest-image-tester/kotlin"
		}
	}
	sql {
		resources {
			srcDir "$projectDir/src/main/sql"
		}
	}
}

task compileCoffeeScript {
	inputs.files "src/main/coffee"
	description = 'Compiles CoffeeScript'
	def sourceDir = "src/main/coffee"
	def includedFiles = fileTree("src/main/coffee") {
		include "*.coffee"
	}
	def targetDir = "build/resources/main/public/js"
	doLast {
		file(targetDir).mkdirs()
		includedFiles.each {file ->
			def filename = file.name
			exec {
				workingDir "$projectDir"
				executable 'coffee'
				args "-o", "$targetDir/", "$sourceDir/$filename"
			}
		}
	}
}

// Compiles TypeScript sources and makes webpack bundle
task buildClient(type: Exec) {
	inputs.files "src/main/ts"
	workingDir = "$projectDir"
	doFirst {
		println("Building client")
		commandLine = 'npm'
		if (project.buildMode == "development") {
			args = ['run', 'build', '--', '--mode', project.buildMode, "--dest", "src/main/resources/public/js"]
		} else {
			args = ['run', 'build', '--', '--mode', project.buildMode, "--dest", "src/main/resources/"]
		}
	}
	doLast {
		println("TypeScript and Webpack done")
	}
}

assemble {
	dependsOn compileCoffeeScript
	dependsOn buildClient
}

run {
	dependsOn buildClient
}

test {
	useJUnitPlatform()
	testLogging {
        	exceptionFormat = 'full'
	}
	systemProperty "postgres.ip", project.properties["postgres.ip"] ?: "localhost"
}

jib {
	to.image = 'dbarashev/sqool-frontend'
	from.image = 'gcr.io/distroless/java:debug'
	container {
		environment = ["GOOGLE_APPLICATION_CREDENTIALS": "/var/run/sqool/dbms-class-2017-eb9a6787a012.json"]
		args = ["--pub", "dbms2019-submissions", "--sub", "dbms2019-frontend"]
	}
	extraDirectory {
		permissions = [
				'/workspace': '777',
		]
	}
}

task docker {
	doLast {
		mkdir "$buildDir/docker/workspace"
		copy {
			from sourceSets.sql.resources.srcDirs
			into "$buildDir/docker/workspace"
			include "*.sql"
		}
		exec {
			workingDir "$projectDir"
			executable 'docker'
			args 'build','-t', 'dbarashev/sqool-frontend-database', '-f', 'sqool-frontend-database.dockerfile', '.'
		}
	}
}
